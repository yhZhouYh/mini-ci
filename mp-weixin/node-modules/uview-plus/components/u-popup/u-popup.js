'use strict'; const e = require('../../../../common/vendor.js')

const t = { name: 'u-popup', mixins: [e.mpMixin, e.mixin, e.props$7], data() { return { overlayDuration: this.duration + 50 } }, watch: { show(e, t) { if (!0 === e) { const e = this.$children; this.retryComputedComponentRect(e) } } }, computed: { transitionStyle() { const t = { zIndex: this.zIndex, position: 'fixed', display: 'flex' }; return t[this.mode] = 0, this.mode === 'left' || this.mode === 'right' ? e.index.$u.deepMerge(t, { bottom: 0, top: 0 }) : this.mode === 'top' || this.mode === 'bottom' ? e.index.$u.deepMerge(t, { left: 0, right: 0 }) : this.mode === 'center' ? e.index.$u.deepMerge(t, { 'alignItems': 'center', 'justify-content': 'center', 'top': 0, 'left': 0, 'right': 0, 'bottom': 0 }) : void 0 }, contentStyle() { const t = {}; if (e.index.$u.sys(), this.mode !== 'center' && (t.flex = 1), this.bgColor && (t.backgroundColor = this.bgColor), this.round) { const o = e.index.$u.addUnit(this.round); this.mode === 'top' ? (t.borderBottomLeftRadius = o, t.borderBottomRightRadius = o) : this.mode === 'bottom' ? (t.borderTopLeftRadius = o, t.borderTopRightRadius = o) : this.mode === 'center' && (t.borderRadius = o) } return e.index.$u.deepMerge(t, e.index.$u.addStyle(this.customStyle)) }, position() { return this.mode === 'center' ? this.zoom ? 'fade-zoom' : 'fade' : this.mode === 'left' ? 'slide-left' : this.mode === 'right' ? 'slide-right' : this.mode === 'bottom' ? 'slide-up' : this.mode === 'top' ? 'slide-down' : void 0 } }, methods: { overlayClick() { this.closeOnClickOverlay && this.$emit('close') }, close(e) { this.$emit('close') }, afterEnter() { this.$emit('open') }, clickHandler() { this.mode === 'center' && this.overlayClick(), this.$emit('click') }, retryComputedComponentRect(t) { const o = ['u-calendar-month', 'u-album', 'u-collapse-item', 'u-dropdown', 'u-index-item', 'u-index-list', 'u-line-progress', 'u-list-item', 'u-rate', 'u-read-more', 'u-row', 'u-row-notice', 'u-scroll-list', 'u-skeleton', 'u-slider', 'u-steps-item', 'u-sticky', 'u-subsection', 'u-swipe-action-item', 'u-tabbar', 'u-tabs', 'u-tooltip']; for (let i = 0; i < t.length; i++) { const s = t[i]; const n = s.$children; o.includes(s.$options.name) && typeof (s == null ? void 0 : s.init) == 'function' && e.index.$u.sleep(50).then((() => { s.init() })), n.length && this.retryComputedComponentRect(n) } } } }

if (!Array) { (e.resolveComponent('u-overlay') + e.resolveComponent('u-status-bar') + e.resolveComponent('u-icon') + e.resolveComponent('u-safe-bottom') + e.resolveComponent('u-transition'))() }Math || ((() => '../u-overlay/u-overlay.js') + (() => '../u-status-bar/u-status-bar.js') + (() => '../u-icon/u-icon.js') + (() => '../u-safe-bottom/u-safe-bottom.js') + (() => '../u-transition/u-transition.js'))(); const o = e._export_sfc(t, [['render', function (t, o, i, s, n, r) { return e.e({ a: t.overlay }, t.overlay ? { b: e.o(r.overlayClick), c: e.p({ show: t.show, duration: n.overlayDuration, customStyle: t.overlayStyle, opacity: t.overlayOpacity }) } : {}, { d: t.safeAreaInsetTop }, (t.safeAreaInsetTop, {}), { e: t.closeable }, t.closeable ? { f: e.p({ name: 'close', color: '#909399', size: '18', bold: !0 }), g: e.o(((...e) => r.close && r.close(...e))), h: e.n(`u-popup__content__close--${t.closeIconPos}`) } : {}, { i: t.safeAreaInsetBottom }, (t.safeAreaInsetBottom, {}), { j: e.s(r.contentStyle), k: e.o(((...e) => t.noop && t.noop(...e))), l: e.o(r.afterEnter), m: e.o(r.clickHandler), n: e.p({ show: t.show, customStyle: r.transitionStyle, mode: r.position, duration: t.duration }) }) }], ['__scopeId', 'data-v-127193cc']]); wx.createComponent(o)
